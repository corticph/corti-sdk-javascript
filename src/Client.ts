/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { Auth } from "./api/resources/auth/client/Client.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "./core/headers.js";
import * as errors from "./errors/index.js";
import { Interactions } from "./api/resources/interactions/client/Client.js";
import { Transcripts } from "./api/resources/transcripts/client/Client.js";
import { Facts } from "./api/resources/facts/client/Client.js";
import { Documents } from "./api/resources/documents/client/Client.js";
import { Templates } from "./api/resources/templates/client/Client.js";
import { Stream } from "./api/resources/stream/client/Client.js";
import { Transcribe } from "./api/resources/transcribe/client/Client.js";

export declare namespace CortiClient {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        clientId: core.Supplier<string>;
        clientSecret: core.Supplier<string>;
        /** Override the Tenant-Name header */
        tenantName?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CortiClient {
    protected readonly _options: CortiClient.Options;
    private readonly _oauthTokenProvider: core.OAuthTokenProvider;
    protected _interactions: Interactions | undefined;
    protected _transcripts: Transcripts | undefined;
    protected _facts: Facts | undefined;
    protected _documents: Documents | undefined;
    protected _templates: Templates | undefined;
    protected _auth: Auth | undefined;
    protected _stream: Stream | undefined;
    protected _transcribe: Transcribe | undefined;

    constructor(_options: CortiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "Tenant-Name": _options?.tenantName,
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@corti/sdk",
                    "X-Fern-SDK-Version": "0.0.0-alpha.10",
                    "User-Agent": "@corti/sdk/0.0.0-alpha.10",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };

        this._oauthTokenProvider = new core.OAuthTokenProvider({
            clientId: this._options.clientId,
            clientSecret: this._options.clientSecret,
            authClient: new Auth({
                ...this._options,
                environment: this._options.environment,
            }),
        });
    }

    public get interactions(): Interactions {
        return (this._interactions ??= new Interactions({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get transcripts(): Transcripts {
        return (this._transcripts ??= new Transcripts({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get facts(): Facts {
        return (this._facts ??= new Facts({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get documents(): Documents {
        return (this._documents ??= new Documents({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get templates(): Templates {
        return (this._templates ??= new Templates({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get stream(): Stream {
        return (this._stream ??= new Stream({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get transcribe(): Transcribe {
        return (this._transcribe ??= new Transcribe({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    /**
     * @param {string} id
     * @param {CortiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.postInteractionsId("id")
     */
    public postInteractionsId(id: string, requestOptions?: CortiClient.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__postInteractionsId(id, requestOptions));
    }

    private async __postInteractionsId(
        id: string,
        requestOptions?: CortiClient.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CortiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling POST /interactions/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
