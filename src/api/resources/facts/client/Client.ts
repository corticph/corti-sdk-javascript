/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Corti from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as serializers from "../../../../serialization/index.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Facts {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Facts {
    protected readonly _options: Facts.Options;

    constructor(_options: Facts.Options) {
        this._options = _options;
    }

    /**
     * @param {Facts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.InternalServerError}
     *
     * @example
     *     await client.facts.factgroupsList()
     */
    public factgroupsList(
        requestOptions?: Facts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseFactGroupsFiltered> {
        return core.HttpResponsePromise.fromPromise(this.__factgroupsList(requestOptions));
    }

    private async __factgroupsList(
        requestOptions?: Facts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseFactGroupsFiltered>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                "factgroups/",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseFactGroupsFiltered.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Corti.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /factgroups/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Retrieves a list of facts for a given interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID.
     * @param {Facts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.facts.list("id")
     */
    public list(
        id: Corti.Uuid,
        requestOptions?: Facts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseFactsList> {
        return core.HttpResponsePromise.fromPromise(this.__list(id, requestOptions));
    }

    private async __list(
        id: Corti.Uuid,
        requestOptions?: Facts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseFactsList>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(serializers.Uuid.jsonOrThrow(id, { omitUndefined: true }))}/facts/`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseFactsList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /interactions/{id}/facts/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Adds new facts to an interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction to which the facts belong. Must be a valid UUID.
     * @param {Corti.RequestFactsCreate} request
     * @param {Facts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.facts.create("id", {
     *         facts: [{
     *                 text: "text",
     *                 group: "other"
     *             }]
     *     })
     */
    public create(
        id: Corti.Uuid,
        request: Corti.RequestFactsCreate,
        requestOptions?: Facts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseFactsCreate> {
        return core.HttpResponsePromise.fromPromise(this.__create(id, request, requestOptions));
    }

    private async __create(
        id: Corti.Uuid,
        request: Corti.RequestFactsCreate,
        requestOptions?: Facts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseFactsCreate>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(serializers.Uuid.jsonOrThrow(id, { omitUndefined: true }))}/facts/`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.RequestFactsCreate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseFactsCreate.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling POST /interactions/{id}/facts/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Updates multiple facts associated with an interaction. If the interaction `status = "in progress"`, the updated facts will be sent to the client over WebSocket.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction for which facts are being updated. Must be a valid UUID.
     * @param {Corti.RequestFactsUpdate} request
     * @param {Facts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.facts.batchUpdate("id", {
     *         facts: [{
     *                 factId: "factId"
     *             }]
     *     })
     */
    public batchUpdate(
        id: Corti.Uuid,
        request: Corti.RequestFactsUpdate,
        requestOptions?: Facts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseFactsUpdate> {
        return core.HttpResponsePromise.fromPromise(this.__batchUpdate(id, request, requestOptions));
    }

    private async __batchUpdate(
        id: Corti.Uuid,
        request: Corti.RequestFactsUpdate,
        requestOptions?: Facts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseFactsUpdate>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(serializers.Uuid.jsonOrThrow(id, { omitUndefined: true }))}/facts/`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.RequestFactsUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseFactsUpdate.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling PATCH /interactions/{id}/facts/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Updates an existing fact within a specific interaction. If the interaction `status = "in progress"`, the updated fact will be sent to the client via WebSocket. To discard a fact, simply set `discarded = true`.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction to which the fact belongs. Must be a valid UUID.
     * @param {Corti.Uuid} factId - The unique identifier of the fact to update. Must be a valid UUID.
     * @param {Corti.RequestFactUpdate} request
     * @param {Facts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.facts.update("id", "factId", {
     *         text: "text",
     *         source: "core"
     *     })
     */
    public update(
        id: Corti.Uuid,
        factId: Corti.Uuid,
        request: Corti.RequestFactUpdate,
        requestOptions?: Facts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseFactUpdate> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, factId, request, requestOptions));
    }

    private async __update(
        id: Corti.Uuid,
        factId: Corti.Uuid,
        request: Corti.RequestFactUpdate,
        requestOptions?: Facts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseFactUpdate>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(serializers.Uuid.jsonOrThrow(id, { omitUndefined: true }))}/facts/${encodeURIComponent(serializers.Uuid.jsonOrThrow(factId, { omitUndefined: true }))}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.RequestFactUpdate.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseFactUpdate.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling PATCH /interactions/{id}/facts/{factId}.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
