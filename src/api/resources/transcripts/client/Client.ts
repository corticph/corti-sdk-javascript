/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Corti from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Transcripts {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Transcripts {
    protected readonly _options: Transcripts.Options;

    constructor(_options: Transcripts.Options) {
        this._options = _options;
    }

    /**
     *  Retrieves a list of transcripts for a given interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID.
     * @param {Corti.TranscriptsListRequest} request
     * @param {Transcripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.InternalServerError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.transcripts.list("f47ac10b-58cc-4372-a567-0e02b2c3d479")
     */
    public async list(
        id: Corti.Uuid,
        request: Corti.TranscriptsListRequest = {},
        requestOptions?: Transcripts.RequestOptions,
    ): Promise<core.Page<Corti.ResponseTranscriptListAllTranscriptsItem>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Corti.TranscriptsListRequest,
            ): Promise<core.WithRawResponse<Corti.ResponseTranscriptListAll>> => {
                const { sort, direction, pageSize, index, full } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (sort != null) {
                    _queryParams["sort"] = sort;
                }
                if (direction != null) {
                    _queryParams["direction"] = direction;
                }
                if (pageSize != null) {
                    _queryParams["pageSize"] = pageSize.toString();
                }
                if (index != null) {
                    _queryParams["index"] = index.toString();
                }
                if (full != null) {
                    _queryParams["full"] = full.toString();
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)).base,
                        `interactions/${encodeURIComponent(id)}/transcripts/`,
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Tenant-Name": requestOptions?.tenantName,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Corti.ResponseTranscriptListAll,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new Corti.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new Corti.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 403:
                            throw new Corti.ForbiddenError(
                                _response.error.body as Corti.ErrorResponse,
                                _response.rawResponse,
                            );
                        case 500:
                            throw new Corti.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                        case 504:
                            throw new Corti.GatewayTimeoutError(
                                _response.error.body as Corti.ErrorResponse,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.CortiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.CortiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.CortiTimeoutError(
                            "Timeout exceeded when calling GET /interactions/{id}/transcripts/.",
                        );
                    case "unknown":
                        throw new errors.CortiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.index != null ? request?.index : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Corti.ResponseTranscriptListAll, Corti.ResponseTranscriptListAllTranscriptsItem>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.transcripts ?? []).length > 0,
            getItems: (response) => response?.transcripts ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "index", _offset));
            },
        });
    }

    /**
     *  Creates a new transcript for an interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction for which the transcript is created. Must be a valid UUID.
     * @param {Corti.TranscriptCreate} request
     * @param {Transcripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.InternalServerError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.transcripts.create("f47ac10b-58cc-4372-a567-0e02b2c3d479", {
     *         recordingId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
     *         primaryLanguage: "en",
     *         modelName: "premier"
     *     })
     */
    public create(
        id: Corti.Uuid,
        request: Corti.TranscriptCreate,
        requestOptions?: Transcripts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseTranscriptCreate> {
        return core.HttpResponsePromise.fromPromise(this.__create(id, request, requestOptions));
    }

    private async __create(
        id: Corti.Uuid,
        request: Corti.TranscriptCreate,
        requestOptions?: Transcripts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseTranscriptCreate>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}/transcripts/`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Corti.ResponseTranscriptCreate, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Corti.ForbiddenError(_response.error.body as Corti.ErrorResponse, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        _response.error.body as Corti.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling POST /interactions/{id}/transcripts/.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Retrieves the transcript for a specific interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction containing the transcript. Must be a valid UUID.
     * @param {Corti.Uuid} transcriptId - The unique identifier of the transcript to retrieve. Must be a valid UUID.
     * @param {Transcripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.InternalServerError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.transcripts.get("f47ac10b-58cc-4372-a567-0e02b2c3d479", "f47ac10b-58cc-4372-a567-0e02b2c3d479")
     */
    public get(
        id: Corti.Uuid,
        transcriptId: Corti.Uuid,
        requestOptions?: Transcripts.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseTranscriptCreate> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, transcriptId, requestOptions));
    }

    private async __get(
        id: Corti.Uuid,
        transcriptId: Corti.Uuid,
        requestOptions?: Transcripts.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseTranscriptCreate>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}/transcripts/${encodeURIComponent(transcriptId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Corti.ResponseTranscriptCreate, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Corti.ForbiddenError(_response.error.body as Corti.ErrorResponse, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        _response.error.body as Corti.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling GET /interactions/{id}/transcripts/{transcriptId}.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Deletes a specific transcript associated with an interaction.
     *
     * @param {Corti.Uuid} id - The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID.
     * @param {Corti.Uuid} transcriptId - The unique identifier of the transcript to delete. Must be a valid UUID.
     * @param {Transcripts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.InternalServerError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.transcripts.delete("f47ac10b-58cc-4372-a567-0e02b2c3d479", "f47ac10b-58cc-4372-a567-0e02b2c3d479")
     */
    public delete(
        id: Corti.Uuid,
        transcriptId: Corti.Uuid,
        requestOptions?: Transcripts.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, transcriptId, requestOptions));
    }

    private async __delete(
        id: Corti.Uuid,
        transcriptId: Corti.Uuid,
        requestOptions?: Transcripts.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}/transcripts/${encodeURIComponent(transcriptId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Corti.ForbiddenError(_response.error.body as Corti.ErrorResponse, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        _response.error.body as Corti.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling DELETE /interactions/{id}/transcripts/{transcriptId}.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
