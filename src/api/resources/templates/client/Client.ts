/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Corti from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Templates {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Templates {
    protected readonly _options: Templates.Options;

    constructor(_options: Templates.Options) {
        this._options = _options;
    }

    /**
     *  Retrieves a list of template sections with optional filters for organization and language.
     *
     * @param {Corti.TemplatesSectionsListRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.InternalServerError}
     *
     * @example
     *     await client.templates.sectionsList()
     */
    public sectionsList(
        request: Corti.TemplatesSectionsListRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseAllTemplateSections> {
        return core.HttpResponsePromise.fromPromise(this.__sectionsList(request, requestOptions));
    }

    private async __sectionsList(
        request: Corti.TemplatesSectionsListRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseAllTemplateSections>> {
        const { org, lang } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (org !== undefined) {
            _queryParams["org"] = org;
        }

        if (lang !== undefined) {
            _queryParams["lang"] = lang;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "templateSections/",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseAllTemplateSections.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /templateSections/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Retrieves a list of templates with optional filters for organization, language, and status.
     *
     * @param {Corti.TemplatesListRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.InternalServerError}
     *
     * @example
     *     await client.templates.list()
     */
    public list(
        request: Corti.TemplatesListRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<Corti.ResponseAllTemplates> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Corti.TemplatesListRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.ResponseAllTemplates>> {
        const { org, lang, status } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (org !== undefined) {
            _queryParams["org"] = org;
        }

        if (lang !== undefined) {
            _queryParams["lang"] = lang;
        }

        if (status !== undefined) {
            _queryParams["status"] = status;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "templates/",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ResponseAllTemplates.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /templates/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Retrieves template by key.
     *
     * @param {string} key - The key of the template
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.InternalServerError}
     *
     * @example
     *     await client.templates.get("key")
     */
    public get(
        key: string,
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<Corti.TemplateFiltered> {
        return core.HttpResponsePromise.fromPromise(this.__get(key, requestOptions));
    }

    private async __get(
        key: string,
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.TemplateFiltered>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `templates/${encodeURIComponent(key)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.TemplateFiltered.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Corti.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /templates/{key}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
