/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import { StreamSocket } from "./Socket.js";

export declare namespace Stream {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface ConnectArgs {
        id: string;
        tenantName: string;
        token: string;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Stream {
    protected readonly _options: Stream.Options;

    constructor(_options: Stream.Options) {
        this._options = _options;
    }

    public async connect(args: Stream.ConnectArgs): Promise<StreamSocket> {
        const { id, tenantName, token, headers, debug, reconnectAttempts } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["tenant-name"] = tenantName;
        _queryParams["token"] = token;
        let _headers: Record<string, string> = {
            ...headers,
        };
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options["baseUrl"])) ??
                    (await core.Supplier.get(this._options["environment"])).wss,
                `/audio-bridge/v2/interactions/${encodeURIComponent(id)}/streams`,
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new StreamSocket({ socket });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
