/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import { TranscribeSocket } from "./Socket.js";

export declare namespace Transcribe {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface ConnectArgs {
        "tenant-name"?: string;
        token?: string;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, unknown>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Transcribe {
    protected readonly _options: Transcribe.Options;

    constructor(_options: Transcribe.Options) {
        this._options = _options;
    }

    public async connect(args: Transcribe.ConnectArgs = {}): Promise<TranscribeSocket> {
        const queryParams: Record<string, unknown> = {};
        if (args["tenant-name"] != null) {
            queryParams["tenant-name"] = args["tenant-name"];
        }

        if (args["token"] != null) {
            queryParams["token"] = args["token"];
        }

        let websocketHeaders: Record<string, unknown> = {};
        websocketHeaders = {
            ...websocketHeaders,
            ...args["headers"],
        };
        const socket = new core.ReconnectingWebSocket(
            `${(await core.Supplier.get(this._options["baseUrl"])) ?? (await core.Supplier.get(this._options["environment"])).wss}/audio-bridge/v2/transcribe?${core.url.toQueryString(queryParams, { arrayFormat: "repeat" })}`,
            [],
            { debug: args["debug"] ?? false, maxRetries: args["reconnectAttempts"] ?? 30 },
            websocketHeaders,
        );
        return new TranscribeSocket({ socket });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
