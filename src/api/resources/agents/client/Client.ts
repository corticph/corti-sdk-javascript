/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Corti from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as serializers from "../../../../serialization/index.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Agents {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Agents {
    protected readonly _options: Agents.Options;

    constructor(_options: Agents.Options) {
        this._options = _options;
    }

    /**
     * This endpoint retrieves a list of all agents that can be called by the Corti Agent Framework.
     *
     * @param {Corti.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     *
     * @example
     *     await client.agents.list()
     */
    public list(
        request: Corti.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsAgentResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Corti.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsAgentResponse[]>> {
        const { limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (offset !== undefined) {
            _queryParams["offset"] = offset?.toString() ?? null;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                "agents",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.agents.list.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /agents.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint allows the creation of a new agent that can be utilized in the `POST /threads` endpoint.
     *
     * @param {Corti.AgentsCreateAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     *
     * @example
     *     await client.agents.create({
     *         name: "name",
     *         description: "description"
     *     })
     */
    public create(
        request: Corti.AgentsCreateAgent,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsAgent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Corti.AgentsCreateAgent,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsAgent>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                "agents",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.AgentsCreateAgent.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsAgent.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling POST /agents.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint retrieves an agent by its identifier. The agent contains information about its capabilities and the experts it can call.
     *
     * @param {string} id - The identifier of the agent to retrieve.
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.get("id")
     */
    public get(
        id: string,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsAgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsAgentResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsAgentResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /agents/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint deletes an agent by its identifier. Once deleted, the agent can no longer be used in threads.
     *
     * @param {string} id - The identifier of the agent to delete.
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.delete("id")
     */
    public delete(id: string, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(id: string, requestOptions?: Agents.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling DELETE /agents/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint updates an existing agent. Only the fields provided in the request body will be updated; other fields will remain unchanged.
     *
     * @param {string} id - The identifier of the agent to update.
     * @param {Corti.AgentsAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.update("id", {
     *         id: "id",
     *         name: "name",
     *         description: "description"
     *     })
     */
    public update(
        id: string,
        request: Corti.AgentsAgent,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsAgent> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Corti.AgentsAgent,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsAgent>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.AgentsAgent.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsAgent.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling PATCH /agents/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint retrieves the agent card in JSON format, which provides metadata about the agent, including its name, description, and the experts it can call.
     *
     * @param {string} id - The identifier of the agent to retrieve the agent card for.
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.getCard("id")
     */
    public getCard(
        id: string,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsAgentCard> {
        return core.HttpResponsePromise.fromPromise(this.__getCard(id, requestOptions));
    }

    private async __getCard(
        id: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsAgentCard>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}/agent-card.json`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsAgentCard.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /agents/{id}/agent-card.json.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint sends a message to the specified agent to start or continue a task. The agent processes the message and returns a response. If the message contains a task ID that matches an ongoing task, the agent will continue that task; otherwise, it will start a new task.
     *
     * @param {string} id - The identifier of the agent to send the message to.
     * @param {Corti.AgentsMessageSendParams} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.messageSend("id", {
     *         message: {
     *             role: "user",
     *             parts: [{
     *                     kind: "text",
     *                     text: "text"
     *                 }],
     *             messageId: "messageId"
     *         }
     *     })
     */
    public messageSend(
        id: string,
        request: Corti.AgentsMessageSendParams,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsMessageSendResponse> {
        return core.HttpResponsePromise.fromPromise(this.__messageSend(id, request, requestOptions));
    }

    private async __messageSend(
        id: string,
        request: Corti.AgentsMessageSendParams,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsMessageSendResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}/v1/message:send`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.AgentsMessageSendParams.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsMessageSendResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling POST /agents/{id}/v1/message:send.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Sends a message to the specified agent and streams the response as it is generated. This method requires the server to have support for streaming.
     */
    public messageStream(
        id: string,
        request: Corti.AgentsMessageSendParams,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Corti.AgentsMessageStreamResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__messageStream(id, request, requestOptions));
    }

    private async __messageStream(
        id: string,
        request: Corti.AgentsMessageSendParams,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Corti.AgentsMessageStreamResponse>>> {
        const _response = await core.fetcher<ReadableStream>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}/v1/message:stream`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.AgentsMessageSendParams.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.AgentsMessageStreamResponse.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "sse",
                        streamTerminator: "[DONE]",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling POST /agents/{id}/v1/message:stream.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint retrieves the status and details of a specific task associated with the given agent. It provides information about the task's current state, history, and any artifacts produced during its execution.
     *
     * @param {string} id - The identifier of the agent associated with the task.
     * @param {string} taskId - The identifier of the task to retrieve.
     * @param {Corti.AgentsGetTaskRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.getTask("id", "taskId")
     */
    public getTask(
        id: string,
        taskId: string,
        request: Corti.AgentsGetTaskRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsTask> {
        return core.HttpResponsePromise.fromPromise(this.__getTask(id, taskId, request, requestOptions));
    }

    private async __getTask(
        id: string,
        taskId: string,
        request: Corti.AgentsGetTaskRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsTask>> {
        const { historyLength } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (historyLength !== undefined) {
            _queryParams["historyLength"] = historyLength?.toString() ?? null;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}/v1/tasks/${encodeURIComponent(taskId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsTask.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /agents/{id}/v1/tasks/{taskId}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This endpoint retrieves all tasks and top-level messages associated with a specific context for the given agent.
     *
     * @param {string} id - The identifier of the agent associated with the context.
     * @param {string} contextId - The identifier of the context (thread) to retrieve tasks for.
     * @param {Corti.AgentsGetContextRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.UnauthorizedError}
     * @throws {@link Corti.NotFoundError}
     *
     * @example
     *     await client.agents.getContext("id", "contextId")
     */
    public getContext(
        id: string,
        contextId: string,
        request: Corti.AgentsGetContextRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Corti.AgentsContext> {
        return core.HttpResponsePromise.fromPromise(this.__getContext(id, contextId, request, requestOptions));
    }

    private async __getContext(
        id: string,
        contextId: string,
        request: Corti.AgentsGetContextRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.AgentsContext>> {
        const { limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (offset !== undefined) {
            _queryParams["offset"] = offset?.toString() ?? null;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `agents/${encodeURIComponent(id)}/v1/contexts/${encodeURIComponent(contextId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AgentsContext.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Corti.UnauthorizedError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Corti.NotFoundError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError(
                    "Timeout exceeded when calling GET /agents/{id}/v1/contexts/{contextId}.",
                );
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
