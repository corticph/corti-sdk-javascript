/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index.js";
import * as Corti from "../../../../../api/index.js";
import * as core from "../../../../../core/index.js";
import { Uuid } from "../../../../types/Uuid.js";
import { RequestTranscriptCreatePrimaryLanguage } from "../../types/RequestTranscriptCreatePrimaryLanguage.js";
import { RequestTranscriptCreateParticipantsItem } from "../../types/RequestTranscriptCreateParticipantsItem.js";
import { RequestTranscriptCreateModelName } from "../../types/RequestTranscriptCreateModelName.js";

export const TranscriptCreate: core.serialization.Schema<serializers.TranscriptCreate.Raw, Corti.TranscriptCreate> =
    core.serialization.object({
        recordingId: Uuid,
        primaryLanguage: RequestTranscriptCreatePrimaryLanguage,
        isDictation: core.serialization.boolean().optional(),
        isMultichannel: core.serialization.boolean().optional(),
        diarize: core.serialization.boolean().optional(),
        participants: core.serialization.list(RequestTranscriptCreateParticipantsItem).optional(),
        modelName: RequestTranscriptCreateModelName,
    });

export declare namespace TranscriptCreate {
    export interface Raw {
        recordingId: Uuid.Raw;
        primaryLanguage: RequestTranscriptCreatePrimaryLanguage.Raw;
        isDictation?: boolean | null;
        isMultichannel?: boolean | null;
        diarize?: boolean | null;
        participants?: RequestTranscriptCreateParticipantsItem.Raw[] | null;
        modelName: RequestTranscriptCreateModelName.Raw;
    }
}
