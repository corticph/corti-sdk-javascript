/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CortiClient } from "../../src/Client";
import * as Corti from "../../src/api/index";

describe("Agents", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                description: "description",
                experts: [
                    {
                        type: "expert",
                        id: "id",
                        name: "name",
                        description: "description",
                        systemPrompt: "systemPrompt",
                    },
                ],
            },
        ];
        server.mockEndpoint().get("/agents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.list();
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                description: "description",
                experts: [
                    {
                        type: "expert",
                        id: "id",
                        name: "name",
                        description: "description",
                        systemPrompt: "systemPrompt",
                    },
                ],
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });
});
