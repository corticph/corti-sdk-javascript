/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { CortiClient } from "../../src/Client";
import * as Corti from "../../src/api/index";

describe("Agents", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                description: "description",
                experts: [
                    {
                        type: "expert",
                        id: "id",
                        name: "name",
                        description: "description",
                        systemPrompt: "systemPrompt",
                    },
                ],
            },
        ];
        server.mockEndpoint().get("/agents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.list();
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                description: "description",
                experts: [
                    {
                        type: "expert",
                        id: "id",
                        name: "name",
                        description: "description",
                        systemPrompt: "systemPrompt",
                    },
                ],
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.list();
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { name: "name", description: "description" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        { id: "id", name: "name", transportType: "stdio", authorizationType: "none", url: "url" },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.create({
            name: "name",
            description: "description",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        {
                            id: "id",
                            name: "name",
                            transportType: "stdio",
                            authorizationType: "none",
                            url: "url",
                        },
                    ],
                },
            ],
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { name: "name", description: "description" };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                description: "description",
            });
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { name: "name", description: "description" };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .post("/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.create({
                name: "name",
                description: "description",
            });
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        { id: "id", name: "name", transportType: "stdio", authorizationType: "none", url: "url" },
                    ],
                },
            ],
        };
        server.mockEndpoint().get("/agents/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agents.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        {
                            id: "id",
                            name: "name",
                            transportType: "stdio",
                            authorizationType: "none",
                            url: "url",
                        },
                    ],
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.get("id");
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.get("id");
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().get("/agents/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.get("id");
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        server.mockEndpoint().delete("/agents/id").respondWith().statusCode(200).build();

        const response = await client.agents.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().delete("/agents/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.delete("id");
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().delete("/agents/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.delete("id");
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server.mockEndpoint().delete("/agents/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.agents.delete("id");
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { id: "id", name: "name", description: "description" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        { id: "id", name: "name", transportType: "stdio", authorizationType: "none", url: "url" },
                    ],
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/agents/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.update("id", {
            id: "id",
            name: "name",
            description: "description",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            experts: [
                {
                    type: "expert",
                    id: "id",
                    name: "name",
                    description: "description",
                    systemPrompt: "systemPrompt",
                    mcpServers: [
                        {
                            id: "id",
                            name: "name",
                            transportType: "stdio",
                            authorizationType: "none",
                            url: "url",
                        },
                    ],
                },
            ],
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { id: "id", name: "name", description: "description" };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .patch("/agents/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("id", {
                id: "id",
                name: "name",
                description: "description",
            });
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { id: "id", name: "name", description: "description" };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .patch("/agents/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("id", {
                id: "id",
                name: "name",
                description: "description",
            });
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = { id: "id", name: "name", description: "description" };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .patch("/agents/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.update("id", {
                id: "id",
                name: "name",
                description: "description",
            });
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getCard (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = {
            protocolVersion: "protocolVersion",
            name: "name",
            description: "description",
            url: "url",
            preferredTransport: "JSONRPC",
            additionalInterfaces: [{ url: "url", transport: "transport" }],
            iconUrl: "iconUrl",
            version: "version",
            capabilities: {
                streaming: true,
                pushNotifications: true,
                stateTransitionHistory: true,
                extensions: [{ uri: "uri" }],
            },
            securitySchemes: { key: "value" },
            security: { key: "value" },
            defaultInputModes: ["defaultInputModes"],
            defaultOutputModes: ["defaultOutputModes"],
            skills: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    tags: ["tags"],
                    examples: [{ role: "user", parts: [{ kind: "text", text: "text" }], messageId: "messageId" }],
                    inputModes: ["inputModes"],
                    outputModes: ["outputModes"],
                    security: { key: "value" },
                },
            ],
            supportsAuthenticatedExtendedCard: true,
            signatures: [{ protected: "protected", signature: "signature", header: { key: "value" } }],
        };
        server
            .mockEndpoint()
            .get("/agents/id/agent-card.json")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.getCard("id");
        expect(response).toEqual({
            protocolVersion: "protocolVersion",
            name: "name",
            description: "description",
            url: "url",
            preferredTransport: "JSONRPC",
            additionalInterfaces: [
                {
                    url: "url",
                    transport: "transport",
                },
            ],
            iconUrl: "iconUrl",
            version: "version",
            capabilities: {
                streaming: true,
                pushNotifications: true,
                stateTransitionHistory: true,
                extensions: [
                    {
                        uri: "uri",
                    },
                ],
            },
            securitySchemes: {
                key: "value",
            },
            security: {
                key: "value",
            },
            defaultInputModes: ["defaultInputModes"],
            defaultOutputModes: ["defaultOutputModes"],
            skills: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    tags: ["tags"],
                    examples: [
                        {
                            role: "user",
                            parts: [
                                {
                                    kind: "text",
                                    text: "text",
                                },
                            ],
                            messageId: "messageId",
                        },
                    ],
                    inputModes: ["inputModes"],
                    outputModes: ["outputModes"],
                    security: {
                        key: "value",
                    },
                },
            ],
            supportsAuthenticatedExtendedCard: true,
            signatures: [
                {
                    protected: "protected",
                    signature: "signature",
                    header: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("getCard (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/agent-card.json")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getCard("id");
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getCard (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/agent-card.json")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getCard("id");
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getCard (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/agent-card.json")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getCard("id");
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("messageSend (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = {
            message: { role: "user", parts: [{ kind: "text", text: "text" }], messageId: "messageId" },
        };
        const rawResponseBody = {
            message: {
                role: "user",
                parts: [{ kind: "text", text: "text" }],
                metadata: { key: "value" },
                extensions: ["extensions"],
                referenceTaskIds: ["referenceTaskIds"],
                messageId: "messageId",
                taskId: "taskId",
                contextId: "contextId",
            },
            task: {
                id: "id",
                contextId: "contextId",
                status: {
                    state: "submitted",
                    message: { role: "user", parts: [{ kind: "text", text: "text" }], messageId: "messageId" },
                    timestamp: "2024-01-15T09:30:00Z",
                },
                history: [{ role: "user", parts: [{ kind: "text", text: "text" }], messageId: "messageId" }],
                artifacts: [{ artifactId: "artifactId", parts: [{ kind: "text", text: "text" }] }],
                metadata: { key: "value" },
            },
        };
        server
            .mockEndpoint()
            .post("/agents/id/v1/message:send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.messageSend("id", {
            message: {
                role: "user",
                parts: [
                    {
                        kind: "text",
                        text: "text",
                    },
                ],
                messageId: "messageId",
            },
        });
        expect(response).toEqual({
            message: {
                role: "user",
                parts: [
                    {
                        kind: "text",
                        text: "text",
                    },
                ],
                metadata: {
                    key: "value",
                },
                extensions: ["extensions"],
                referenceTaskIds: ["referenceTaskIds"],
                messageId: "messageId",
                taskId: "taskId",
                contextId: "contextId",
            },
            task: {
                id: "id",
                contextId: "contextId",
                status: {
                    state: "submitted",
                    message: {
                        role: "user",
                        parts: [
                            {
                                kind: "text",
                                text: "text",
                            },
                        ],
                        messageId: "messageId",
                    },
                    timestamp: new Date("2024-01-15T09:30:00.000Z"),
                },
                history: [
                    {
                        role: "user",
                        parts: [
                            {
                                kind: "text",
                                text: "text",
                            },
                        ],
                        messageId: "messageId",
                    },
                ],
                artifacts: [
                    {
                        artifactId: "artifactId",
                        parts: [
                            {
                                kind: "text",
                                text: "text",
                            },
                        ],
                    },
                ],
                metadata: {
                    key: "value",
                },
            },
        });
    });

    test("messageSend (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = {
            message: {
                role: "user",
                parts: [
                    { kind: "text", text: "text" },
                    { kind: "text", text: "text" },
                ],
                messageId: "messageId",
            },
        };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .post("/agents/id/v1/message:send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.messageSend("id", {
                message: {
                    role: "user",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    messageId: "messageId",
                },
            });
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("messageSend (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = {
            message: {
                role: "user",
                parts: [
                    { kind: "text", text: "text" },
                    { kind: "text", text: "text" },
                ],
                messageId: "messageId",
            },
        };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .post("/agents/id/v1/message:send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.messageSend("id", {
                message: {
                    role: "user",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    messageId: "messageId",
                },
            });
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("messageSend (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });
        const rawRequestBody = {
            message: {
                role: "user",
                parts: [
                    { kind: "text", text: "text" },
                    { kind: "text", text: "text" },
                ],
                messageId: "messageId",
            },
        };
        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .post("/agents/id/v1/message:send")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.messageSend("id", {
                message: {
                    role: "user",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    messageId: "messageId",
                },
            });
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getTask (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = {
            id: "id",
            contextId: "contextId",
            status: {
                state: "submitted",
                message: {
                    role: "user",
                    parts: [{ kind: "text", text: "text" }],
                    metadata: { key: "value" },
                    extensions: ["extensions"],
                    referenceTaskIds: ["referenceTaskIds"],
                    messageId: "messageId",
                    taskId: "taskId",
                    contextId: "contextId",
                },
                timestamp: "2024-01-15T09:30:00Z",
            },
            history: [
                {
                    role: "user",
                    parts: [{ kind: "text", text: "text" }],
                    metadata: { key: "value" },
                    extensions: ["extensions"],
                    referenceTaskIds: ["referenceTaskIds"],
                    messageId: "messageId",
                    taskId: "taskId",
                    contextId: "contextId",
                },
            ],
            artifacts: [
                {
                    artifactId: "artifactId",
                    name: "name",
                    description: "description",
                    parts: [{ kind: "text", text: "text" }],
                    metadata: { key: "value" },
                    extensions: ["extensions"],
                },
            ],
            metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/agents/id/v1/tasks/taskId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.getTask("id", "taskId");
        expect(response).toEqual({
            id: "id",
            contextId: "contextId",
            status: {
                state: "submitted",
                message: {
                    role: "user",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    metadata: {
                        key: "value",
                    },
                    extensions: ["extensions"],
                    referenceTaskIds: ["referenceTaskIds"],
                    messageId: "messageId",
                    taskId: "taskId",
                    contextId: "contextId",
                },
                timestamp: new Date("2024-01-15T09:30:00.000Z"),
            },
            history: [
                {
                    role: "user",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    metadata: {
                        key: "value",
                    },
                    extensions: ["extensions"],
                    referenceTaskIds: ["referenceTaskIds"],
                    messageId: "messageId",
                    taskId: "taskId",
                    contextId: "contextId",
                },
            ],
            artifacts: [
                {
                    artifactId: "artifactId",
                    name: "name",
                    description: "description",
                    parts: [
                        {
                            kind: "text",
                            text: "text",
                        },
                    ],
                    metadata: {
                        key: "value",
                    },
                    extensions: ["extensions"],
                },
            ],
            metadata: {
                key: "value",
            },
        });
    });

    test("getTask (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/tasks/taskId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getTask("id", "taskId");
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getTask (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/tasks/taskId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getTask("id", "taskId");
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getTask (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/tasks/taskId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getTask("id", "taskId");
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getContext (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = {
            id: "id",
            items: [
                {
                    kind: "task",
                    id: "id",
                    contextId: "contextId",
                    status: { state: "submitted" },
                    history: [{ role: "user", parts: [{ kind: "text", text: "text" }], messageId: "messageId" }],
                    artifacts: [{ artifactId: "artifactId", parts: [{ kind: "text", text: "text" }] }],
                    metadata: { key: "value" },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/agents/id/v1/contexts/contextId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.getContext("id", "contextId");
        expect(response).toEqual({
            id: "id",
            items: [
                {
                    kind: "task",
                    id: "id",
                    contextId: "contextId",
                    status: {
                        state: "submitted",
                    },
                    history: [
                        {
                            role: "user",
                            parts: [
                                {
                                    kind: "text",
                                    text: "text",
                                },
                            ],
                            messageId: "messageId",
                        },
                    ],
                    artifacts: [
                        {
                            artifactId: "artifactId",
                            parts: [
                                {
                                    kind: "text",
                                    text: "text",
                                },
                            ],
                        },
                    ],
                    metadata: {
                        key: "value",
                    },
                },
            ],
        });
    });

    test("getContext (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/contexts/contextId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getContext("id", "contextId");
        }).rejects.toThrow(
            new Corti.BadRequestError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getContext (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/contexts/contextId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getContext("id", "contextId");
        }).rejects.toThrow(
            new Corti.UnauthorizedError({
                code: "code",
                description: "description",
            }),
        );
    });

    test("getContext (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({
            environment: { base: server.baseUrl, wss: server.baseUrl, login: server.baseUrl },
        });

        const rawResponseBody = { code: "code", description: "description" };
        server
            .mockEndpoint()
            .get("/agents/id/v1/contexts/contextId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.agents.getContext("id", "contextId");
        }).rejects.toThrow(
            new Corti.NotFoundError({
                code: "code",
                description: "description",
            }),
        );
    });
});
