/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { CortiClient } from "../../src/Client";

describe("Interactions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({ token: "test", tenantName: "test", environment: server.baseUrl });
        const rawRequestBody = {
            encounter: { identifier: "identifier", status: "planned", type: "first_consultation" },
        };
        const rawResponseBody = { interactionId: "f47ac10b-58cc-4372-a567-0e02b2c3d479", websocketUrl: "websocketUrl" };
        server
            .mockEndpoint()
            .post("/interactions/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.interactions.create({
            encounter: {
                identifier: "identifier",
                status: "planned",
                type: "first_consultation",
            },
        });
        expect(response).toEqual({
            interactionId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            websocketUrl: "websocketUrl",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({ token: "test", tenantName: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            assignedUserId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            encounter: {
                identifier: "identifier",
                status: "planned",
                type: "first_consultation",
                period: { startedAt: "2024-01-15T09:30:00Z", endedAt: "2024-01-15T09:30:00Z" },
                title: "title",
            },
            patient: {
                identifier: "identifier",
                name: "name",
                gender: "male",
                birthDate: "2024-01-15T09:30:00Z",
                pronouns: "pronouns",
            },
            endedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            websocketUrl: "websocketUrl",
            lastUpdated: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/interactions/f47ac10b-58cc-4372-a567-0e02b2c3d479")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.interactions.get("f47ac10b-58cc-4372-a567-0e02b2c3d479");
        expect(response).toEqual({
            id: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            assignedUserId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            encounter: {
                identifier: "identifier",
                status: "planned",
                type: "first_consultation",
                period: {
                    startedAt: new Date("2024-01-15T09:30:00.000Z"),
                    endedAt: new Date("2024-01-15T09:30:00.000Z"),
                },
                title: "title",
            },
            patient: {
                identifier: "identifier",
                name: "name",
                gender: "male",
                birthDate: new Date("2024-01-15T09:30:00.000Z"),
                pronouns: "pronouns",
            },
            endedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            websocketUrl: "websocketUrl",
            lastUpdated: new Date("2024-01-15T09:30:00.000Z"),
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({ token: "test", tenantName: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/interactions/f47ac10b-58cc-4372-a567-0e02b2c3d479")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.interactions.delete("f47ac10b-58cc-4372-a567-0e02b2c3d479");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new CortiClient({ token: "test", tenantName: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            assignedUserId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            encounter: {
                identifier: "identifier",
                status: "planned",
                type: "first_consultation",
                period: { startedAt: "2024-01-15T09:30:00Z", endedAt: "2024-01-15T09:30:00Z" },
                title: "title",
            },
            patient: {
                identifier: "identifier",
                name: "name",
                gender: "male",
                birthDate: "2024-01-15T09:30:00Z",
                pronouns: "pronouns",
            },
            endedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            websocketUrl: "websocketUrl",
            lastUpdated: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/interactions/f47ac10b-58cc-4372-a567-0e02b2c3d479")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.interactions.update("f47ac10b-58cc-4372-a567-0e02b2c3d479");
        expect(response).toEqual({
            id: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            assignedUserId: "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            encounter: {
                identifier: "identifier",
                status: "planned",
                type: "first_consultation",
                period: {
                    startedAt: new Date("2024-01-15T09:30:00.000Z"),
                    endedAt: new Date("2024-01-15T09:30:00.000Z"),
                },
                title: "title",
            },
            patient: {
                identifier: "identifier",
                name: "name",
                gender: "male",
                birthDate: new Date("2024-01-15T09:30:00.000Z"),
                pronouns: "pronouns",
            },
            endedAt: new Date("2024-01-15T09:30:00.000Z"),
            createdAt: new Date("2024-01-15T09:30:00.000Z"),
            updatedAt: new Date("2024-01-15T09:30:00.000Z"),
            websocketUrl: "websocketUrl",
            lastUpdated: new Date("2024-01-15T09:30:00.000Z"),
        });
    });
});
